#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

#define BUFFERSIZE 256

static char InputString[256];
static char OutputString[256];

void Testing(void)
{
	int fd;
	FILE *fp;
   	char data[300];
   	fp = fopen("data.txt", "r");
   	fseek(fp, 0, SEEK_SET);
   	fread(data, 256, 1, fp);
   	fclose(fp);
   	FILE *fp1;
   	int key[16];
   	int key1[16];
   	fp1 = fopen("/dev/urandom","r");
   	fread(key, 1, 16, fp1);
   	fclose(fp1);
   	char t[256];
   	char message[256];
   	int i,y;
   	for(i=0; i<16; i++)
   	{
   		key1[i] = key[i];
   	}

   strcat(data,"\0");
   printf("%s\n", data);
   printf("%c\n", data[strlen(data)-1]);
   // char data[256];
   /* Read and display data */
   	int iter;
	printf("str: %s\n", strlen(data));
	for(iter = 0; iter<strlen(data); iter++)
	{
		if(data[iter]!='\0')
		{
			t[iter] = data[iter] ^ (int)key[iter%16];
			key[iter%16] = t[iter];
		}
		else
		{
			t[iter] = '\0';
		}
		// printf("Encrypted message = %s\n", t);
	}
   printf("Encrypted Message = \n");
   printf("%s\n", t);
   printf("\n");
   int iter1;
   for(iter1 = 0; iter1<strlen(t);iter1++)
   {
   	if(t[iter1] != '\0')
   	{
   		message[iter1] = t[iter1] ^ (int)key1[iter1%16];
   		key1[iter1%16] = t[iter1];
   	}
   	else
   	{
   		message[iter1] = '\0';
   	}
   }
   message[iter1]= '\0';
   printf("Decrypted Message=\n");
   printf("%s\n", message);
   printf("\n");

	if ( (fd = open("/dev/encdev", O_RDWR)) < 0 )
	{
		perror("Failed to open /dev/encdev device.\n");
		return errno;
	}
	// printf("Enter your Message: ");
	// fgets(InputString, 256, stdin);
	// InputString[strlen(InputString)-1] = '\0';
	printf("Message Entered by user: %s\n", data);

	int returnedValue;
	if ( (returnedValue = write(fd, data, strlen(data))) < 0 )
	{
		printf("Failed to write the message.\n");
		return -1;
	}

	// getchar();
	printf("Reading back from /dev/encdev\n");
	if ( (returnedValue = read(fd, OutputString, BUFFERSIZE)) < 0 )
	{
		perror("Failed to recieve the message.\n");
		printf("%d\n", errno);
		return errno;
	}
	// read(fd, OutputString, BUFFERSIZE);
	printf("Mssg recv: %s\n", OutputString);
	printf("Exiting\n");
}

int main(int argc, char const *argv[])
{
	Testing();
	return 0;
}
